{"version":3,"sources":["js/squares.js","js/home.js","firebase.js","js/internships.js","js/projects.js","js/notfound.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","class","Component","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","entry","switchOverlay","bind","assertThisInitialized","setState","_this2","height","width","xmlns","type","onClick","js_squares","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ref","jsonFileRef","child","Internships","getDownloadURL","then","url","xhr","XMLHttpRequest","responseType","onload","event","console","log","response","open","send","catch","error","code","React","Projects","Notfound","Boolean","window","location","hostname","match","routing","react_router_dom","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2028326.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../css/squares.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div class=\"grid-container\">\n          <div class=\"square-box\"><p className=\"square-title\">IRENE</p></div>\n          <div class=\"square-box\"><p className=\"square-title\">RESUME</p></div>\n          <div class=\"square-box\"><p className=\"square-title\">PROJECTS</p></div>\n          <div class=\"square-box\"><p className=\"square-title\">MORE</p></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport '../css/home.css';\nimport Squares from './squares';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {entry: true};\n        this.switchOverlay = this.switchOverlay.bind(this);\n    }\n\n    switchOverlay() {\n        this.setState({entry: false})\n    }\n    render() {\n        var entry;\n        entry = <div class=\"svg-wrapper\">\n                    <svg height=\"60\" width=\"320\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <rect class=\"shape\" height=\"60\" width=\"320\" />\n                    </svg>\n                    <button type=\"button\" className=\"text\" onClick={() => this.switchOverlay()}>IRENE AI LI</button>\n                </div>\n        return (\n            this.state.entry ? entry : <Squares />\n        );\n    }\n}\n\nexport default Home;\n","import * as firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyAT7Cx_ingUfmOwcvhNHW5DmDy5G4Yv3VI\",\n    authDomain: \"my-website-6a297.firebaseapp.com\",\n    databaseURL: \"https://my-website-6a297.firebaseio.com\",\n    projectId: \"my-website-6a297\",\n    storageBucket: \"my-website-6a297.appspot.com\",\n    messagingSenderId: \"156913653189\"\n}\n\nfirebase.initializeApp(config);\nconst databaseRef = firebase.database().ref();\nconst storageRef = firebase.storage().ref();\n// export const contentRef= databaseRef.child(\"content\")\nexport const jsonFileRef = storageRef.child(\"my-website.json\")","import React from 'react';\nimport {jsonFileRef} from '../firebase';\n\nclass Internships extends React.Component {\n    constructor(props) {\n\t\tsuper(props);\n    }\n    \n    componentWillMount() {\n        jsonFileRef.getDownloadURL().then(function(url) {\n            var xhr = new XMLHttpRequest();\n            xhr.responseType = \"json\";\n            xhr.onload = function(event) {\n                console.log(xhr.response);\n            };\n            xhr.open('GET', url)\n            xhr.send();\n        }).catch(function(error) {\n            switch (error.code) {\n                case 'storage/object-not-found':\n                  // File doesn't exist\n                  break;\n            \n                case 'storage/unauthorized':\n                  // User doesn't have permission to access the object\n                  break;\n            \n                case 'storage/canceled':\n                  // User canceled the upload\n                  break;\n            \n                case 'storage/unknown':\n                  // Unknown error occurred, inspect the server response\n                  break;\n              }\n        });\n    }\n    \n    render() {\n\n        return <div>\n                    <h1>Internships</h1>\n                </div>\n    }\n}\n\nexport default Internships","import React from 'react'\n\nclass Projects extends React.Component {\n    render() {\n        return <div>\n                    <h1>Projects</h1>\n                </div>\n    }\n}\n\nexport default Projects","import React from 'react';\n\nconst Notfound = () => <h1>Not found</h1>\n\nexport default Notfound","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport Home from './js/home';\nimport Internships from './js/internships';\nimport Projects from './js/projects';\nimport Notfound from './js/notfound';\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n    <Router>\n        <div>\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/internships\" component={Internships} />\n                <Route path=\"/projects\" component={Projects} />\n                <Route component={Notfound} />\n            </Switch>\n        </div>\n    </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}